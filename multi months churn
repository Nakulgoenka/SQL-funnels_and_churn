WITH 
months AS
(SELECT
  '2017-01-01' as first_day,
  '2017-01-31' as last_day
UNION
SELECT
  '2017-02-01' as first_day,
  '2017-02-28' as last_day
UNION
SELECT
  '2017-03-01' as first_day,
  '2017-03-31' as last_day
),
cross_join as 
(select * from subscriptions
cross join months
)
SELECT *
FROM cross_join
LIMIT 100;
-- we het an temporary table with all the possibilities of combinations of enrolments

-- further

WITH months AS
(SELECT
  '2017-01-01' as first_day,
  '2017-01-31' as last_day
UNION
SELECT
  '2017-02-01' as first_day,
  '2017-02-28' as last_day
UNION
SELECT
  '2017-03-01' as first_day,
  '2017-03-31' as last_day
),
cross_join AS
(SELECT *
FROM subscriptions
CROSS JOIN months),
status AS
(SELECT id, first_day as month,
CASE
  WHEN (subscription_start < first_day)
  AND (subscription_end > first_day
OR subscription_end IS NULL) 
THEN 1
ELSE 0
END as is_active,
case
when (subscription_end between first_day and  last_day)
then 1
else 0
end as is_canceled 
FROM cross_join),                             -- now its easy to analyse data as required
status_aggregate as 
(select month, sum(is_active), sum(is_canceled) from status
group by month
)
SELECT *
FROM status_aggregate
;

-- now its easy to analyse data as required
